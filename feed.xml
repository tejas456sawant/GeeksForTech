<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>GeeksForTech</title>
    <link href="https://geeksfortech.com/feed.xml" rel="self" />
    <link href="https://geeksfortech.com" />
    <updated>2020-09-26T20:34:43+05:30</updated>
    <author>
        <name>Tejas Sawant</name>
    </author>
    <id>https://geeksfortech.com</id>

    <entry>
        <title>Servlet Lifecycle</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/servlet-lifecycle/"/>
        <id>https://geeksfortech.com/servlet-lifecycle/</id>
            <category term="java"/>
            <category term="Servlet"/>
            <category term="Java Server Pages"/>
            <category term="JSP"/>

        <updated>2020-09-26T20:34:02+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/41/jsp.png" alt="JSP" />
                     Servlets provide methods that are called when specific events occur in a larger context. Programming in this environment involves&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/41/jsp.png" alt="JSP" />
                
  <p>
    Servlets provide methods that are called when specific events occur in a larger context. Programming in this environment involves writing predefined methods, which are called as required by a managing program.<br>Servlets operate in the context of a request and response model managed by a servlet engine. The engine does the following:&nbsp;
  </p>

  <ul>
    <li>Loads a servlet when it’s first requested</li><li>Calls the servlet’s init() method </li><li>Handles any number of requests by calling the servlet’s service() method </li><li>When shutting down, calls each servlet destroy() method.<br></li>
  </ul>

  <p>
    As with applets, there are standard base classes <b><i>javax.servlet.GenericServlet</i></b> and <b><i>javax.servlet.http.HttpServlet</i></b> that implements the servlet callback methods. Servlet programming, then, consists of subclassing one of these classes and overriding the necessary method to accomplish the specific task at hand. <br>The following sections examine each of these lifecycle methods. <br>
  </p>

    <h2 id="init" class="align-center">
      init
    </h2>

  <p>
    When a request for a servlet is received by the servlet engine, it checks to see if the servlet is already loaded. If not, the servlet engine uses a class loader to get the particular servlet class required and then invokes its constructor to get an instance of the servlet. After the servlet is loaded, but before it services any requests, the servlet engine calls an initialization method with the following signature:&nbsp;
  </p>
<pre class="line-numbers  language-java"><code>public void init(ServletConfig config) throws ServletException</code></pre>

  <p>
    This method is called only once, just before the servlet is placed into service. The <b>ServletConfig</b> object provides access to the servlet context and to any initialization parameters coded for the servlet. To maintain a reference to the servlet context, the config object must be stored as an instance variable, a task that’s done by the init(ServletConfig) method in GenericServlet. For this reason, it’s important to call super.init(config) within the init() method of any subclass. Inside the init() method, the servlet can perform any necessary startup tasks, such as establishing database connections. If any errors occur that make the servlet unable to handle requests, it should throw an UnavailableException. This prevents requests from being directed to the servlet. <br>
  </p>

    <h2 id="service" class="align-center">
      service
    </h2>

  <p>
    After the init() method completes successfully, the servlet is able to accept requests. By default, only a single instance of the servlet is created, and the servlet engine dispatches each request to the instance in a separate thread. The servlet method that’s called has the following signature:&nbsp;
  </p>
<pre class="line-numbers  language-java"><code>public void service( 
    ServletRequest request, 
    ServletResponse response
) throws ServletException, IOException; </code></pre>

  <p>
    The ServletRequest object is constructed by the servlet engine and acts as a wrapper for information about the client and the request. This includes the identity of the remote system, the request parameters, and any input stream associated with the request. Similarly, the ServletResponse object provides the means for a servlet to communicate its results back to the original requester. It includes methods for opening an output stream and for specifying the content type and length. As important as the service() method is, it’s rarely used. The reason for this is most servlets are designed to operate in the HTTP environment, for which there’s a specialized javax.servlet.http package. Rather than extending javax.servlet.GenericServlet directly, most servlets extend its subclass javax.servlet.http.HttpServlet. This subclass provides specialized methods corresponding to each HTTP request method: <br>
  </p>

  <ul>
    <li><b>GET&nbsp;</b>requests are handled by <b>doGet()</b></li><li><b>POST&nbsp;</b>requests by <b>doPost()</b>&nbsp;</li>
  </ul>

  <p>
    The signatures for these methods use HTTP-specific versions of the request and response objects:&nbsp;
  </p>
<pre class="line-numbers  language-java"><code>public void doGet( 
    HttpServletRequest request, 
    HttpServletResponse response
 ) throws ServletException, IOException;
</code></pre>

  <p>
    The service(Request, Response) method in HttpServlet casts the request and response objects into their HTTP-specific counterparts, and then calls service(HttpServletRequest, HttpServletResponse), which examines the request and calls the appropriate doGet(), doPost(), or other methods. A typical HTTP servlet, then, includes an override to one or more of these subsidiary methods, rather than an override to service().&nbsp;
  </p>

    <h2 id="destroynbsp" class="align-center">
      destroy&nbsp;
    </h2>

  <p>
    The servlet specification allows a servlet engine to unload a servlet at any time. This may be done to conserve system resources or in preparation for the servlet engine shutdown. The servlet engine notifies each loaded servlet this is about to happen by calling its destroy() method. By overriding destroy(), you can release any resources allocated during init().
  </p>

  <p>
    Source :- <b>JSP: The Complete Reference</b> by&nbsp;<b>Phil Hanna</b>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>What is Servlet in java ?</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/what-is-servlet-in-java/"/>
        <id>https://geeksfortech.com/what-is-servlet-in-java/</id>
            <category term="java"/>
            <category term="Servlet"/>
            <category term="Java Server Pages"/>
            <category term="JSP"/>

        <updated>2020-09-26T20:34:43+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/39/jsp.png" alt="JSP" />
                    Servlets are Java classes that extend the functionality of a Web server by dynamically generating Web pages. A run-time environment&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/39/jsp.png" alt="JSP" />
                <p id="viewer-foo" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr"><strong>Servlets </strong>are Java classes that extend the functionality of a Web server by dynamically generating Web pages. A run-time environment known as a servlet engine manages <strong>servlet loading</strong> and <strong>unloading</strong>, and works with the Web server to direct requests to servlets and to send output back to Web clients. Since their introduction in 1997, servlets have become the dominant environment for <strong>server-side Java programming</strong> and a widely used portal into application servers. They offer several key advantages:</p>
<div id="viewer-3oatb" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr"> </div>
<ol class="public-DraftStyleDefault-ol">
<li id="viewer-ftj0t" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr public-DraftStyleDefault-reset _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk"><strong>Performance</strong> Older technologies such as the Common Gateway Interface (CGI) typically start a new process to handle each incoming request. In the days when the Web was primarily a repository for academic and scientific research, there wasn’t very much traffic and this approach worked well. Servlets, by contrast, is loaded when first requested, and stay in memory indefinitely. The servlet engine loads a single instance of the servlet class and dispatches requests to it using a pool of available threads. The resulting performance improvement is considerable.</p>
</li>
<li id="viewer-6behi" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk"><strong>Simplicity</strong> Client-side Java applets run in a virtual machine provided by the Web browser. This introduces compatibility issues that increase complexity and limit the functionality that applets can provide. Servlets simplify this situation considerably because they run in a virtual machine in a controlled server environment and require only basic HTTP to communicate with their clients. No special client software is required, even with older browsers.</p>
</li>
<li id="viewer-9mkr1" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk"><strong>HTTP Sessions </strong>Although HTTP servers have no built-in capability to remember details of a previous request from the same client, the Servlet API provides an <em>HttpSession class</em> that overcomes this limitation.</p>
</li>
<li id="viewer-9qpqq" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk"><strong>Access to Java Technology </strong>Servlets, being Java applications, have direct access to the full range of Java features, such as threading, network access, and database connectivity. JSP pages, which are automatically translated into servlets, inherit all these advantages.</p>
</li>
</ol>
<p>Source :- <strong>JSP: The Complete Reference</strong> By <strong>Phil Hanna</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>HTTP Request Model</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/http-request-model/"/>
        <id>https://geeksfortech.com/http-request-model/</id>
            <category term="Java Server Pages"/>
            <category term="JSP"/>
            <category term="HTTP"/>

        <updated>2020-09-26T20:08:40+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/38/http.png" alt="HTTP Request Model" />
                     The specification describes HTTP as a stateless request/response protocol whose basic operation is as follows: A key consideration is&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/38/http.png" alt="HTTP Request Model" />
                
  <p>
    The specification describes HTTP as a stateless request/response protocol whose basic operation is as follows:
  </p>

  <ul>
    <li>A client application, such as a Web browser, opens a socket to the Web server’s HTTP port (80, by default).</li><li>Through the connection, the client writes an ASCII text request line, followed by zero or more HTTP headers, an empty line, and any data that accompanies the request.</li><li>The Web server parses the request and locates the specified resource.</li><li>The server writes a copy of the resource to the socket, where it’s read by the client.</li><li><span style="color: var(--eb-text-primary-color); font-family: var(--font-base); font-size: 1em; font-weight: var(--font-weight-normal);">The server closes the connection.</span><br></li>
  </ul>

  <p>
    A key consideration is this model is <b><i>stateless</i></b>. This means in handling a request, the Web server doesn’t remember anything about previous requests from the same client. The protocol is simply a request and a response. Obviously, this imposes limitations on application programming, which typically requires a great deal of back-and-forth conversation, as well as complex objects that must be initialized and have their state maintained. The way around this is to have the server assign an identifier to the session represented by a set of client requests and to have the client remember the identifier and supply it to the server with each request.
  </p>

    <h3 id="connecting-to-the-web-servernbsp">
      Connecting to the Web Server&nbsp;
    </h3>

  <p>
    A Web server operates by listening for requests on a particular well-known port number, usually port 80, although any available port can be used. If a Web server listens on a different port, URLs that refer to this server must include a colon and the port number immediately after the server name. For example,&nbsp;
  </p>
<pre class="line-numbers  language-http"><code>https://geeksfortech.com/index.html</code></pre>

  <p>
    refers to an HTML document known to a Web server running on the <a href="https://geeksfortech.com" target="_blank">geeksfortech.com</a> host on the default port 80. If the server is running on port 4311 instead, the URL looks like following
  </p>
<pre class="line-numbers  language-http"><code>http://geeksfortech.com:4311/index.html
</code></pre>

  <p>
    A client, such as a Web browser, initiates an HTTP request by opening a TCP/IP socket to the Web server port and then opening input and output stream over the socket. In Java terms, this would amount to a few lines of code:
  </p>
<pre class="line-numbers  language-java"><code>Socket socket = new Socket(“geeksfortech.com”, 80);
InputStream istream = socket.getInputStream();
OutputStream ostream = socket.getOutputStream();</code></pre>

  <p>
    The parameters required to open the socket are the Web server hostname and the port number. The server hostname is extracted from the URL, while the port number is either implied or also extracted from the URL. The output stream is used to send HTTP commands to the Web server; the input stream is used to read the response.
  </p>

    <h3 id="sending-the-http-requestbr">
      Sending the HTTP Request<br>
    </h3>

  <p>
    Once the socket connection is made, the Web browser writes an HTTP command to request the document. A request has up to four parts. <br><br>The first part is the request line. This consists of three tokens, separated by spaces: the request method, the request URI, and the HTTP version. The following shows a typical request line:&nbsp;
  </p>
<pre class="line-numbers  language-http"><code>GET /index.html HTTP/1.0
</code></pre>

  <p>
    In this example, the request method is <b>GET</b>, the URI is <b>/index.html</b>, and the <b>HTTP</b> version is <b>HTTP/1.0</b>.
  </p>

  <p>
    The HTTP specification defines eight possible methods, shown in the following
  </p>
<div><style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
</style>
<table>
  <tr>
    <th>Sr.No</th>
    <th>Method</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>1</td>
    <td>GET</td>
    <td>A simple request to retrieve the resource identified in the URI.</td>
  </tr>
  <tr>
    <td>2</td>
    <td>HEAD</td>
    <td>The same as GET, except the server, doesn’t return the requested document. The server only returns the status line and headers.</td>
  </tr>
  <tr>
    <td>3</td>
    <td>POST</td>
    <td>A request for the server to accept data that will be written to the client’s output stream.</td>
  </tr>
  <tr>
    <td>4</td>
    <td>PUT</td>
    <td>A request for the server to store the data in the request as the new contents of the specified URI.</td>
  </tr>
  <tr>
    <td>5</td>
    <td>DELETE</td>
    <td>A request for the server to delete the resource named in the URI.</td>
  </tr>
  <tr>
    <td>6</td>
    <td>OPTIONS</td>
    <td>A request for information about what request methods the server supports.</td>
  </tr>
    <tr>
    <td>7</td>
    <td>TRACE</td>
    <td>A request for the Web server to echo the HTTP request and its headers.</td>
  </tr>
    <tr>
    <td>8</td>
    <td>CONNECT</td>
    <td>A documented but currently unimplemented method reserved for use with a tunneling proxy.</td>
</table>
</div>

  <p>
    The second token on the request line is the requested <strong>Uniform Resource Identifier (URI)</strong>. This is the URI of the document or other resource being requested. For all practical purposes, this corresponds to the <strong>URL</strong> without the leading <strong>http:// </strong>and hostname. In the example of <b>http://www.geeksfortech.com/index.html</b>, the request <b>URI</b> is <strong>/index.html</strong>
  </p>

  <p>
    The last token on the line is the HTTP version. This indicates the highest level of the HTTP specification the client application understands. The allowable values are <b>HTTP/1.0 </b>and<b> HTTP/1.1</b>
  </p>

  <p>
    After the request line come any request headers. These are key/value pairs, one pair per line, with the key and value separated by a colon (:). After the last request header is written, an empty line consisting of only a carriage return and line feed is sent. This informs the server that no more headers follow. Even if no headers exist, this empty line must be sent, so the server doesn’t look for any more headers. Request headers to inform the server further about the identity and capabilities of the client. Typical request headers might be
  </p>

  <ul>
    <li><b>User-Agent</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The vendor and version of the client </li><li><b>Accept</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A list of content types the client recognizes </li><li><b>Content-Length</b>&nbsp; &nbsp; &nbsp; &nbsp;The number of bytes of data appended to the request</li>
  </ul>

    <h3 id="server-acceptance-of-the-requestbr">
      Server Acceptance of the Request<br>
    </h3>

  <p>
    When a client connects to the Web server’s listening port, the server accepts the connection and handles the request. In most cases, it does so by starting a thread to process the request, so it can continue to service new requests. Handling the request means different things depending on the URI. If the URI represents a static document, the server opens the document file and prepares to copy its contents back to the client. If the URI is a program name, such as a CGI script, servlet, or JSP page, and the server is configured to handle such a request, the server prepares to invoke the program or process.
  </p>

    <h3 id="the-http-response-from-the-serverbr">
      The HTTP Response from the Server<br>
    </h3>

  <p>
    The server processes the request, the result is the same—an HTTP response. Similar to a request, a response consists of up to four parts: <br>a status line, zero or more response headers, an empty line signaling the end of the headers, and the data that makes up the request.
  </p>

  <p>
    The status line consists of up to three tokens:&nbsp;
  </p>

  <ol>
    <li><b>The HTTP version</b>. Just as the client indicates the highest version it can understand, so the server indicates its capabilities.</li><li><b>The response code</b>. This is a three-digit numeric code that indicates whether the request succeeded or failed and, if it failed, the reason why.</li><li><b>Optional response description</b>. which is a human-readable explanation of the response code.</li>
  </ol>

  <p>
    A typical HTTP response status line looks like this&nbsp;
  </p>
<pre class="line-numbers  language-http"><code>HTTP/1.0 200 OK
</code></pre>

  <p>
    which indicates a successful retrieval of the requested document according to the 1.0 level of the HTTP specification. <br>After the status line comes the response headers, with an empty line as the delimiter. Like request headers, these indicate the capabilities of the server and identify details about the response data. <br>The last part of the response is the requested data itself, typically an HTML document or image stream. After the data is sent, the server closes its end of the connection.
  </p>

  <p>
    Source :- <b>JSP: The Complete Reference</b> By <b>Phil Hanna</b>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hypertext Transfer Protocol (HTTP)</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/hypertext-transfer-protocol-http/"/>
        <id>https://geeksfortech.com/hypertext-transfer-protocol-http/</id>
            <category term="Java Server Pages"/>
            <category term="JSP"/>
            <category term="HTTP"/>

        <updated>2020-09-26T20:08:12+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/37/http.png" alt="http" />
                    What Is HTTP?Hypertext Markup Language (HTML) is the language used to describe the insides of Web documents, Hypertext Transfer Protocol&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/37/http.png" alt="http" />
                <h4 id="viewer-foo" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr"><strong>What Is HTTP?</strong></h4>
<p>Hypertext Markup Language (HTML) is the language used to describe the insides of Web documents, Hypertext Transfer Protocol (HTTP) is the language used to describe how these documents are sent over the Internet.</p>
<p id="viewer-fg6k2" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr">HTTP prescribes the rules by which browsers make requests and servers supply responses. This set of rules, or protocol, includes ways to</p>
<ul class="public-DraftStyleDefault-ul">
<li id="viewer-33a10" class="ljrnk _1QOLZ _2eQSj public-DraftStyleDefault-unorderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr public-DraftStyleDefault-reset _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">Ask for a document by name</p>
</li>
<li id="viewer-foq2j" class="ljrnk _1QOLZ _2eQSj public-DraftStyleDefault-unorderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">Agree on the data format</p>
</li>
<li id="viewer-46hkt" class="ljrnk _1QOLZ _2eQSj public-DraftStyleDefault-unorderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">Determine who the user is</p>
</li>
<li id="viewer-en8a6" class="ljrnk _1QOLZ _2eQSj public-DraftStyleDefault-unorderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">Decide how to handle outdated resources</p>
</li>
<li id="viewer-7qrc7" class="ljrnk _1QOLZ _2eQSj public-DraftStyleDefault-unorderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">Indicate the results of a request and other useful functions.</p>
</li>
</ul>
<p id="viewer-2g4hr" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr">HTTP consists of a set of commands written as lines of ordinary ASCII text. When you use a Web browser, you don’t enter the HTTP commands directly. Instead, when you type a URL or click a hyperlink, the browser translates your action into HTTP commands that request the document from the server specified in the URL. The Web server finds the document and sends it back to the browser, where it’s displayed, along with its associated graphics and other hyperlinks.</p>
<h4 id="viewer-apui1" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr"><strong>The HTTP Specification</strong></h4>
<p id="viewer-1nipp" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr">Internet standards are usually specified in a Request for Comments (RFC) published by the Internet Engineering Task Force (IETF). These RFCs are widely accepted by the Internet research and development community. Because they’re standards documents, they tend to be written in a formal language, like that of a legal document. This makes them unsuitable as tutorials, but invaluable for reference. RFCs are numbered and never change when issued. If a standard is updated, a new RFC is issued. Being standards, RFCs are widely available on the Internet.</p>
<p id="viewer-9a8ll" class="XzvDs _208Ie ljrnk blog-post-text-font blog-post-text-color _2QAo- _25MYV _1Fao9 ljrnk public-DraftStyleDefault-block-depth0 public-DraftStyleDefault-text-ltr">Several RFCs deal with HTTP :</p>
<ol class="public-DraftStyleDefault-ol">
<li id="viewer-c90pa" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr public-DraftStyleDefault-reset _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">RFC 1945 A description of HTTP version 1.0</p>
</li>
<li id="viewer-c1h40" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">RFC 2068 The initial description of version 1.1</p>
</li>
<li id="viewer-7gopg" class="ljrnk _1QOLZ public-DraftStyleDefault-orderedListItem
   public-DraftStyleDefault-depth0
   public-DraftStyleDefault-list-ltr _2QAo- _25MYV _1Fao9 ljrnk">
<p class="_208Ie _2QAo- _25MYV _1Fao9 ljrnk">RFC 2616 An updated version of the 1.1 specification</p>
</li>
</ol>
<p>Source :- <strong>JSP: The Complete Reference</strong> By <strong>Phil Hanna</strong></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Web Programming Models</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/web-programming-models/"/>
        <id>https://geeksfortech.com/web-programming-models/</id>
            <category term="java"/>
            <category term="Java Server Pages"/>
            <category term="JSP"/>

        <updated>2020-09-26T20:06:49+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/36/cover.webp" alt="1st Model" />
                     1. Static Document Server Model The first operational model had the Web server simply serving up documents on request.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/36/cover.webp" alt="1st Model" />
                
  <p>
    <b>1. Static Document Server Model</b>
  </p>

  <p>
    The first operational model had the Web server simply serving up documents on request. In this environment, the content doesn’t change unless a human author supplies a new version of a document.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/36/static-document-server-model.webp" height="378" width="740" alt="Static document server model" />
      <figcaption>Static document server model</figcaption>
    </figure>

  <p>
    <b>2. Dynamic content generated by a CGI script</b>
  </p>

  <p>
    A CGI program is invoked by the Web server in response to certain types of requests, usually requests for documents in a particular directory or filenames having a particular extension, such as .cgi. The request parameters are passed as key/value pairs and the request headers as environment variables. The program reads these parameters and headers, performs the application task at hand (typically accessing a database to do so), and then generates an HTTP response. The response is sent back to the requesting Web browser as if it were an ordinary static document.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/36/Dynamic-content-generated-by-a-CGI-script.webp" height="421" width="642" alt="Dynamic content generated by a CGI script" />
      <figcaption>Dynamic content generated by a CGI script</figcaption>
    </figure>

  <p>
    CGI is convenient, but it has one big drawback. Ordinarily, CGI spawns a new process for each HTTP request. This isn’t a problem when traffic is low, but it creates a great deal of overhead when the traffic level increases. This being the case, CGI in general doesn’t scale well.
  </p>

  <p>
    <b>3. Dynamic applications using servlets, JSP, and J2EE</b><br><br>A significant improvement came with the release in 1997 of the Java Servlet API, followed quickly by the JavaServer Pages (JSP) API. These related technologies bring the full power of Java to the Web server, with database connectivity, network access, and multithreaded operations, and, notably, a different process model. Servlets and JSP pages operate from a single instance that remains in memory and uses multiple threads to service requests simultaneously. Servlets and JSP pages can make use of the full Java 2 Enterprise Edition (J2EE) environment for sophisticated, robust applications.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/36/Dynamic-applications-using-servlets-JSP-and-J2EE.webp" height="547" width="552" alt="Dynamic applications using servlets, JSP, and J2EE" />
      <figcaption>Dynamic applications using servlets, JSP, and J2EE</figcaption>
    </figure>

  <p>
    Source :- <b>JSP: The Complete Reference</b> By <b>Phil Hanna</b><br>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hosting wordpress site free on google cloud with bitnami wordpress and free SSL certificate</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/hosting-wordpress-site-free-on-google-cloud-with-bitnami-wordpress-and-free-ssl-certificate/"/>
        <id>https://geeksfortech.com/hosting-wordpress-site-free-on-google-cloud-with-bitnami-wordpress-and-free-ssl-certificate/</id>
            <category term="Wordpress"/>
            <category term="Google Cloud Platform"/>
            <category term="GCP"/>
            <category term="Free SSL"/>
            <category term="Bitnami Bitnami Wordpress"/>

        <updated>2020-09-25T01:51:04+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/11/cover.webp" alt="Open LiteSpeed Wordpress" />
                     This article shows how you can free host your wordpress website on GCP for next one year. In this&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/11/cover.webp" alt="Open LiteSpeed Wordpress" />
                
  <p>
    This article shows how you can free host your wordpress website on GCP for next one year. In this article we have used google cloud bitnami wordpress ssl for securing site. You can use your first 300$ credits for free hosting. So let’s start.
  </p>

  <p>
    <b>Step 1 :-</b> First open <a href="https://console.cloud.google.com" target="_blank" rel="nofollow noopener">https://console.cloud.google.com/ </a>create new project if you have existing project that is also ok.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/creating-or-selecting-project-2.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/creating-or-selecting-project-2-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/creating-or-selecting-project-2-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/creating-or-selecting-project-2-md.png 768w"  height="491" width="1024" alt="project window" />
      <figcaption>Creating Or Selecting Project</figcaption>
    </figure>

  <p>
    <b>Step 2 :-</b> Click on marketplace.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/marketplace-2.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/marketplace-2-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/marketplace-2-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/marketplace-2-md.png 768w"  height="285" width="590" alt="Marketplace" />
      <figcaption>GCP Marketplace</figcaption>
    </figure>

  <p>
    <b>Step 3 :-</b> Search for <b><i>Wordpress</i></b>.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/search-wordpress-2.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/search-wordpress-2-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/search-wordpress-2-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/search-wordpress-2-md.png 768w"  height="280" width="590" alt="Search Wordpress" />
      <figcaption>Search Wordpress</figcaption>
    </figure>

  <p>
    <b>Step 4 :-</b> Click on <b>openlitespeed-wordpress</b>. After it will redirect to openlitespeed-wordpress page in GCP.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/select-openlitespeed-wordpress-2.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/select-openlitespeed-wordpress-2-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/select-openlitespeed-wordpress-2-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/select-openlitespeed-wordpress-2-md.png 768w"  height="282" width="590" alt="Openlitespeed Wordpress" />
      <figcaption>Openlitespeed Wordpress</figcaption>
    </figure>

  <p>
    <b>Step 5:-</b> Click on <b>LAUNCH</b>. You can enter information as needed. You can change Deployment name, Boot Disk Type, etc. After that allow traffic from all over worldwide network for that enter <b>0.0.0.0/0</b> in all fields. After that press Deploy.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/allow-traffic.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/allow-traffic-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/allow-traffic-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/allow-traffic-md.png 768w"  height="282" width="590" alt="Allow traffic from all network." />
      <figcaption>Allow traffic from all network.</figcaption>
    </figure>

  <p>
    <b>Step 6 :-</b> After reserve that IP means allocate static IP so sever address will never change. after that goto <b>Cloud DNS</b>. Press on <b>Create Zone</b>. Give zone name. In <b>DNS Field</b> enter your domain name. For tutorial purpose i am using free domain name. After that press <b>Create</b>.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/dns-name.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/dns-name-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/dns-name-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/dns-name-md.png 768w"  height="413" width="477" alt="DNS Name" />
      <figcaption>DNS Name</figcaption>
    </figure>

  <p>
    <b>Step 7:-</b> Copy <b>NS </b>and Paste in <b>NS </b>of your domain. Press <b>Change Server</b>.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/updating-nameserver.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/updating-nameserver-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/updating-nameserver-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/updating-nameserver-md.png 768w"  height="389" width="590" alt="NS Change" />
      <figcaption>NS Change</figcaption>
    </figure>

  <p>
    <b>Step 8:-</b> Changes in <b>NS </b>will take some time. After that <b>copy IP address and create two records</b> first one in <b>A record </b>in which only you have to enter <b>server IP address</b>. Another one is CNAME record in which you have to prefix DNS name with www and you have to select record type <b>CNAME and enter Canonical</b> name with you original domain name in this case <b>stacktech.tk</b> After that your <b>DNS Zone</b> will look like following -
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/dns-zone.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/dns-zone-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/dns-zone-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/dns-zone-md.png 768w"  height="339" width="590" alt="DNS Zone" />
      <figcaption>DNS Zone</figcaption>
    </figure>

  <p>
    <b>Step 9 :-</b> After that you can check whether everything is properly done or not by using <strong>ping </strong>command. If you get proper reply with your entered IP address then everything is fine.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/ping-domain.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/ping-domain-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/ping-domain-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/ping-domain-md.png 768w"  height="176" width="537" alt="Ping" />
      <figcaption>Ping</figcaption>
    </figure>

  <p>
    <b>Step 10 :-</b> After that login to <b>SSH </b>from <b>Deployment manager</b>. Now we are going to generate SSL certificate for our domain. When you First time login using ssh it will ask you about domain name enter domain name and press enter. You have to just enter information.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/ssl-certificate.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/ssl-certificate-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/ssl-certificate-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/ssl-certificate-md.png 768w"  height="504" width="590" alt="SSL" />
      <figcaption>SSL</figcaption>
    </figure>

  <p>
    <b>Step 11:-</b> Now you can visit to your site. you can see site is secure with SSL certificate.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/secure-site.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/secure-site-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/secure-site-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/secure-site-md.png 768w"  height="295" width="590" alt="Secure Site" />
      <figcaption>Secure Site</figcaption>
    </figure>

  <p>
    After that give information and press <b>Install Wordpress</b>.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/install-wordpress.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/install-wordpress-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/install-wordpress-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/install-wordpress-md.png 768w"  height="412" width="590" alt="Install Wordpress" />
      <figcaption>Install Wordpress</figcaption>
    </figure>

  <p>
    It will install wordpress. Now you can login to admin you can post different posts as you want.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/admin-access.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/admin-access-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/admin-access-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/admin-access-md.png 768w"  height="258" width="590" alt="Admin Area" />
      <figcaption>Admin Area</figcaption>
    </figure>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/11/stacktech.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/11/responsive/stacktech-xs.png 300w ,https://geeksfortech.com/media/posts/11/responsive/stacktech-sm.png 480w ,https://geeksfortech.com/media/posts/11/responsive/stacktech-md.png 768w"  height="256" width="590" alt="Done" />
      <figcaption>Secure wordpress site. Installation done. </figcaption>
    </figure>

  <p>
    If you have any questions you can ask in comments.
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install python3 on windows ?</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/how-to-install-python3-on-windows/"/>
        <id>https://geeksfortech.com/how-to-install-python3-on-windows/</id>
            <category term="install"/>
            <category term="how to"/>
            <category term="Python"/>

        <updated>2020-09-26T00:51:33+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/13/cover.webp" alt="Installation" />
                     This article shows how you can install python3 on your windows system. first download python3 from official site. select&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/13/cover.webp" alt="Installation" />
                
  <p>
    This article shows how you can install python3 on your windows system. first download <a href="https://www.python.org/downloads/" target="_blank" rel="nofollow noopener">python3</a> from official site. select windows installer it will start downloading.<br>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/13/select-version.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/13/responsive/select-version-xs.png 300w ,https://geeksfortech.com/media/posts/13/responsive/select-version-sm.png 480w ,https://geeksfortech.com/media/posts/13/responsive/select-version-md.png 768w"  height="202" width="590" alt="Select Version" />
      <figcaption>Select Version</figcaption>
    </figure>

  <p>
    After that click on installer. then click o install now and also mark option of Add <b>Python 3.* to PATH</b> by selecting this option you don’t need to add manually path to environment variable.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/13/install-now.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/13/responsive/install-now-xs.png 300w ,https://geeksfortech.com/media/posts/13/responsive/install-now-sm.png 480w ,https://geeksfortech.com/media/posts/13/responsive/install-now-md.png 768w"  height="361" width="590" alt="Insttall Now" />
      <figcaption>Insttall Now</figcaption>
    </figure>

  <p>
    It will start installation process. wait for finishing it.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/13/setup-progressing.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/13/responsive/setup-progressing-xs.png 300w ,https://geeksfortech.com/media/posts/13/responsive/setup-progressing-sm.png 480w ,https://geeksfortech.com/media/posts/13/responsive/setup-progressing-md.png 768w"  height="361" width="590" alt="Setup Processing" />
      <figcaption>Setup Processing</figcaption>
    </figure>

  <p>
    After that you can see installation is complete. Then click on <b>Close</b>.
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/13/installayion-complete.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/13/responsive/installayion-complete-xs.png 300w ,https://geeksfortech.com/media/posts/13/responsive/installayion-complete-sm.png 480w ,https://geeksfortech.com/media/posts/13/responsive/installayion-complete-md.png 768w"  height="359" width="590" alt="Installation Complete" />
      <figcaption>Installation Complete</figcaption>
    </figure>

  <p>
    After that you need to restart the window . Then you can verify python installation by typing&nbsp;
  </p>
<pre class="line-numbers  language-bash"><code>python —version </code></pre>

  <p>
    or&nbsp;
  </p>
<pre class="line-numbers  language-bash"><code>python3 —version
</code></pre>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/13/verify-installation.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/13/responsive/verify-installation-xs.png 300w ,https://geeksfortech.com/media/posts/13/responsive/verify-installation-sm.png 480w ,https://geeksfortech.com/media/posts/13/responsive/verify-installation-md.png 768w"  height="76" width="429" alt="verify installation" />
      <figcaption>Verify Installation</figcaption>
    </figure>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to install latest nodejs version on Ubuntu/Linux using CLI</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/how-to-install-latest-nodejs-version-on-ubuntulinux-using-cli/"/>
        <id>https://geeksfortech.com/how-to-install-latest-nodejs-version-on-ubuntulinux-using-cli/</id>
            <category term="nodejs"/>
            <category term="install"/>
            <category term="how to"/>
            <category term="cli"/>
            <category term="Ubuntu"/>

        <updated>2020-09-26T01:25:27+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/12/cover.png" alt="Command to install" />
                     Following are steps to install latest version of nodejs in Ubuntu or Linux curl -sL https://deb.nodesource.com/setup_14.x | sudo -E&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/12/cover.png" alt="Command to install" />
                
  <p>
    Following are steps to install latest version of nodejs in Ubuntu or Linux
  </p>

    <h2 id="ubuntu">
      Ubuntu
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
sudo apt-get install -y nodejs
</code></pre>

  <p>
    If curl is not installed on your system then type following command
  </p>
<pre class="line-numbers  language-bash"><code>sudo apt install curl
</code></pre>

    <h2 id="debian">
      Debian
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_14.x | bash -
apt-get install -y nodejs</code></pre>

    <h2 id="ubuntu-install-node-lts">
      Ubuntu install node LTS
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs
</code></pre>

    <h2 id="debian-install-node-lts">
      Debian install node LTS
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_lts.x | bash -
apt-get install -y nodejs</code></pre>

    <h2 id="ubuntu-install-node-current">
      Ubuntu install node Current
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt-get install -y nodejs
</code></pre>

    <h2 id="debian-install-node-current">
      Debian install node Current
    </h2>
<pre class="line-numbers  language-bash"><code>curl -sL https://deb.nodesource.com/setup_current.x | bash -
apt-get install -y nodejs</code></pre>

  <p>
    Resource :-&nbsp;<a href="https://github.com/nodesource/distributions" target="_blank" rel="nofollow noopener">https://github.com/nodesource/distributions</a>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to add bootstrap to nextjs ?</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/how-to-add-bootstrap-to-nextjs/"/>
        <id>https://geeksfortech.com/how-to-add-bootstrap-to-nextjs/</id>
            <category term="reactjs"/>
            <category term="nextjs"/>
            <category term="Next.js"/>
            <category term="Bootstrap"/>

        <updated>2020-09-25T01:48:26+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/10/cover.webp" alt="Cover" />
                     This article show how to add bootstrap in Next.js project. Following are the steps :- &lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z"&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/10/cover.webp" alt="Cover" />
                
  <p>
    This article show how to add bootstrap in Next.js project. Following are the steps :-
  </p>

  <ul>
    <li>First you need to <a href="https://geeksfortech.com/how-to-create-nextjs-project/" target="_blank">create project</a>.</li><li>After that goto <a href="https://getbootstrap.com/" target="_blank">Bootstrap</a> website.<br></li><li>Click on <a href="https://getbootstrap.com/docs/4.5/getting-started/introduction/" target="_blank">Get Started</a>.<br></li><li>After that grab CSS and JS links from Bootstrap.<br></li>
  </ul>

    <h2 id="css">
      CSS
    </h2>
<pre class="line-numbers  language-html"><code>&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous"&gt;</code></pre>

    <h2 id="js">
      JS
    </h2>
<pre class="line-numbers  language-html"><code>&lt;script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"&gt;&lt;/script&gt;</code></pre>

  <ul>
    <li>Open your Next.js project.<br></li><li>Create <b>_app.js</b> file in your pages folder. Paste following code in it.<br></li>
  </ul>
<pre class="line-numbers  language-jsx"><code>function MyApp({Component,pageProps}) {
    return &lt;Component {...pageProps}/&gt;;
}
export default MyApp;</code></pre>

  <ul>
    <li>After that add <b>head tag in _app.js</b> file and Paste all copied links from Bootstrap website.</li>
  </ul>
<pre class="line-numbers  language-jsx"><code>import Head from 'next/head'

function MyApp({Component,pageProps}) {
    return (
        &lt;&gt;
            &lt;Head&gt;
                &lt;link 
                    rel="stylesheet" 
                    href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" 
                    crossorigin="anonymous"
                    /&gt;
                &lt;script 
                    src="https://code.jquery.com/jquery-3.5.1.slim.min.js" 
                    crossorigin="anonymous"
                    /&gt;
                &lt;script 
                    src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" 
                    crossorigin="anonymous"
                    /&gt;
                &lt;script 
                    src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" 
                    crossorigin="anonymous"
                    /&gt;
            &lt;/Head&gt;
            &lt;Component {...pageProps}/&gt;
        &lt;/&gt;
    );
}

export default MyApp;</code></pre>

  <ul>
    <li>You Can verify whether bootstrap is working or not by adding some bootstrap classes to buttons.</li>
  </ul>
<pre class="line-numbers  language-jsx"><code>export default Home () {
    return(
        &lt;div className="container"&gt;
            &lt;button type="button" className="btn btn-primary"&gt;Primary&lt;/button&gt;
            &lt;button type="button" className="btn btn-secondary"&gt;Secondary&lt;/button&gt;
            &lt;button type="button" className="btn btn-light"&gt;Light&lt;/button&gt;
            &lt;button type="button" className="btn btn-dark"&gt;Dark&lt;/button&gt;
            &lt;button type="button" className="btn btn-link"&gt;Link&lt;/button&gt;
        &lt;/div&gt;  
    );
}</code></pre>

  <ul>
    <li>After that run application and open <a href="http://localhost:3000/" target="_blank" rel="nofollow noopener">http://localhost:3000/</a></li>
  </ul>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/10/bootstrap-buttons.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/10/responsive/bootstrap-buttons-xs.png 300w ,https://geeksfortech.com/media/posts/10/responsive/bootstrap-buttons-sm.png 480w ,https://geeksfortech.com/media/posts/10/responsive/bootstrap-buttons-md.png 768w"  height="340" width="811" alt="Bootstrap Buttons" />
      <figcaption>Bootstrap Buttons</figcaption>
    </figure>

  <p>
    Now you can see bootstrap is successfully added to your nextjs project.
  </p>

  <p>
    Reference :- <a href="https://nextjs.org/docs/advanced-features/custom-app" target="_blank">https://nextjs.org/docs/advanced-features/custom-app</a><br>
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to build debug apk in react native ?</title>
        <author>
            <name>Tejas Sawant</name>
        </author>
        <link href="https://geeksfortech.com/how-to-build-debug-apk-in-react-native/"/>
        <id>https://geeksfortech.com/how-to-build-debug-apk-in-react-native/</id>
            <category term="reactnative"/>
            <category term="ios"/>
            <category term="how to"/>
            <category term="android"/>

        <updated>2020-09-25T01:47:05+05:30</updated>
            <summary>
                <![CDATA[
                        <img src="https://geeksfortech.com/media/posts/9/cover.webp" alt="Cover" />
                     In this article i am going to tell how you can generate debug apk using bare react native application.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://geeksfortech.com/media/posts/9/cover.webp" alt="Cover" />
                
  <p>
    In this article i am going to tell how you can generate debug apk using bare react native application.
  </p>

  <p>
    First you need to create app using following command
  </p>
<pre class="line-numbers  language-bash"><code>npx react-native init DebugApk</code></pre>

  <p>
    After that navigate to folder.
  </p>
<pre class="line-numbers  language-bash"><code>cd DebugApk</code></pre>

  <p>
    Check if you have <b>android/app/src/main/assets/</b> if you dont have then create folder
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/9/creating-dir.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/9/responsive/creating-dir-xs.png 300w ,https://geeksfortech.com/media/posts/9/responsive/creating-dir-sm.png 480w ,https://geeksfortech.com/media/posts/9/responsive/creating-dir-md.png 768w"  height="250" width="502" alt="Creating assets folder" />
      <figcaption>Creating assets folder</figcaption>
    </figure>

  <p>
    after that create new file and save as <b>index.android.bundle</b>
  </p>

  <p>
    if you are on windows
  </p>
<pre class="line-numbers  language-bash"><code>notepad index.android.bundle</code></pre>

  <p>
    or if you are on linux
  </p>
<pre class="line-numbers  language-bash"><code>touch index.android.bundle</code></pre>

  <p>
    After that run following command in command prompt.
  </p>
<pre class="line-numbers  language-bash"><code>npx react-native bundle —platform android —dev false —entry-file index.js —bundle-output android/app/src/main/assets/index.android.bundle —assets-dest android/app/src/main/res/</code></pre>

  <p>
    Then navigate to <b>android</b> folder and type <b>gradlew assembleDebug</b> to generate apk.<br>
  </p>
<pre class="line-numbers  language-bash"><code>cd android
gradlew assembleDebug
</code></pre>

  <p>
    You will find your app in <b>app/build/outputs/apk/debug/</b> folder.<br>
  </p>

    <figure class="post__image post__image--center">
      <img loading="lazy" src="https://geeksfortech.com/media/posts/9/debug-apk.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://geeksfortech.com/media/posts/9/responsive/debug-apk-xs.png 300w ,https://geeksfortech.com/media/posts/9/responsive/debug-apk-sm.png 480w ,https://geeksfortech.com/media/posts/9/responsive/debug-apk-md.png 768w"  height="158" width="590" alt="Debug APK" />
      <figcaption>Debug APK</figcaption>
    </figure>

  <p>
    You can transfer this app on any device and you can run this app without <b>metro server(javascript server)</b>.
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
</feed>
